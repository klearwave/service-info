// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ContainerImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerImage{}

// ContainerImage struct for ContainerImage
type ContainerImage struct {
	// Commit hash related to the image.
	CommitHash *string `json:"commit_hash,omitempty"`
	// Object creation time in RFC 3339 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Database ID of the stored object.
	Id *int64 `json:"id,omitempty"`
	// Full container image including the registry, repository and tag.
	Image *string `json:"image,omitempty"`
	// Container image name without the registry, tag or sha256sum information.
	ImageName *string `json:"image_name,omitempty"`
	// Container image registry without the image name, tag or sha256sum information.
	ImageRegistry *string `json:"image_registry,omitempty"`
	// Container image tag without the registry, image name or sha256 information.
	ImageTag *string `json:"image_tag,omitempty"`
	// SHA256 sum of the container image.
	Sha256sum *string `json:"sha256sum,omitempty"`
	// Object last updated time in RFC 3339 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Versions associated with this container image.
	Versions []Version `json:"versions,omitempty"`
}

// NewContainerImage instantiates a new ContainerImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerImage() *ContainerImage {
	this := ContainerImage{}
	return &this
}

// NewContainerImageWithDefaults instantiates a new ContainerImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerImageWithDefaults() *ContainerImage {
	this := ContainerImage{}
	return &this
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ContainerImage) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ContainerImage) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ContainerImage) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ContainerImage) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ContainerImage) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ContainerImage) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContainerImage) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContainerImage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ContainerImage) SetId(v int64) {
	o.Id = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ContainerImage) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ContainerImage) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ContainerImage) SetImage(v string) {
	o.Image = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *ContainerImage) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *ContainerImage) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *ContainerImage) SetImageName(v string) {
	o.ImageName = &v
}

// GetImageRegistry returns the ImageRegistry field value if set, zero value otherwise.
func (o *ContainerImage) GetImageRegistry() string {
	if o == nil || IsNil(o.ImageRegistry) {
		var ret string
		return ret
	}
	return *o.ImageRegistry
}

// GetImageRegistryOk returns a tuple with the ImageRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageRegistryOk() (*string, bool) {
	if o == nil || IsNil(o.ImageRegistry) {
		return nil, false
	}
	return o.ImageRegistry, true
}

// HasImageRegistry returns a boolean if a field has been set.
func (o *ContainerImage) HasImageRegistry() bool {
	if o != nil && !IsNil(o.ImageRegistry) {
		return true
	}

	return false
}

// SetImageRegistry gets a reference to the given string and assigns it to the ImageRegistry field.
func (o *ContainerImage) SetImageRegistry(v string) {
	o.ImageRegistry = &v
}

// GetImageTag returns the ImageTag field value if set, zero value otherwise.
func (o *ContainerImage) GetImageTag() string {
	if o == nil || IsNil(o.ImageTag) {
		var ret string
		return ret
	}
	return *o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageTagOk() (*string, bool) {
	if o == nil || IsNil(o.ImageTag) {
		return nil, false
	}
	return o.ImageTag, true
}

// HasImageTag returns a boolean if a field has been set.
func (o *ContainerImage) HasImageTag() bool {
	if o != nil && !IsNil(o.ImageTag) {
		return true
	}

	return false
}

// SetImageTag gets a reference to the given string and assigns it to the ImageTag field.
func (o *ContainerImage) SetImageTag(v string) {
	o.ImageTag = &v
}

// GetSha256sum returns the Sha256sum field value if set, zero value otherwise.
func (o *ContainerImage) GetSha256sum() string {
	if o == nil || IsNil(o.Sha256sum) {
		var ret string
		return ret
	}
	return *o.Sha256sum
}

// GetSha256sumOk returns a tuple with the Sha256sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetSha256sumOk() (*string, bool) {
	if o == nil || IsNil(o.Sha256sum) {
		return nil, false
	}
	return o.Sha256sum, true
}

// HasSha256sum returns a boolean if a field has been set.
func (o *ContainerImage) HasSha256sum() bool {
	if o != nil && !IsNil(o.Sha256sum) {
		return true
	}

	return false
}

// SetSha256sum gets a reference to the given string and assigns it to the Sha256sum field.
func (o *ContainerImage) SetSha256sum(v string) {
	o.Sha256sum = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ContainerImage) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ContainerImage) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ContainerImage) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerImage) GetVersions() []Version {
	if o == nil {
		var ret []Version
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerImage) GetVersionsOk() ([]Version, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *ContainerImage) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []Version and assigns it to the Versions field.
func (o *ContainerImage) SetVersions(v []Version) {
	o.Versions = v
}

func (o ContainerImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	if !IsNil(o.ImageRegistry) {
		toSerialize["image_registry"] = o.ImageRegistry
	}
	if !IsNil(o.ImageTag) {
		toSerialize["image_tag"] = o.ImageTag
	}
	if !IsNil(o.Sha256sum) {
		toSerialize["sha256sum"] = o.Sha256sum
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableContainerImage struct {
	value *ContainerImage
	isSet bool
}

func (v NullableContainerImage) Get() *ContainerImage {
	return v.value
}

func (v *NullableContainerImage) Set(val *ContainerImage) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerImage) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerImage(val *ContainerImage) *NullableContainerImage {
	return &NullableContainerImage{value: val, isSet: true}
}

func (v NullableContainerImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


