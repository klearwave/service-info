// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ContainerImageBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerImageBody{}

// ContainerImageBody struct for ContainerImageBody
type ContainerImageBody struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// Commit hash related to the image.
	CommitHash *string `json:"commit_hash,omitempty"`
	// Full container image including the registry, repository and tag.
	Image *string `json:"image,omitempty"`
	// SHA256 sum of the container image.
	Sha256sum *string `json:"sha256sum,omitempty"`
}

// NewContainerImageBody instantiates a new ContainerImageBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerImageBody() *ContainerImageBody {
	this := ContainerImageBody{}
	return &this
}

// NewContainerImageBodyWithDefaults instantiates a new ContainerImageBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerImageBodyWithDefaults() *ContainerImageBody {
	this := ContainerImageBody{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ContainerImageBody) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImageBody) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ContainerImageBody) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *ContainerImageBody) SetSchema(v string) {
	o.Schema = &v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ContainerImageBody) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImageBody) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ContainerImageBody) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ContainerImageBody) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ContainerImageBody) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImageBody) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ContainerImageBody) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ContainerImageBody) SetImage(v string) {
	o.Image = &v
}

// GetSha256sum returns the Sha256sum field value if set, zero value otherwise.
func (o *ContainerImageBody) GetSha256sum() string {
	if o == nil || IsNil(o.Sha256sum) {
		var ret string
		return ret
	}
	return *o.Sha256sum
}

// GetSha256sumOk returns a tuple with the Sha256sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImageBody) GetSha256sumOk() (*string, bool) {
	if o == nil || IsNil(o.Sha256sum) {
		return nil, false
	}
	return o.Sha256sum, true
}

// HasSha256sum returns a boolean if a field has been set.
func (o *ContainerImageBody) HasSha256sum() bool {
	if o != nil && !IsNil(o.Sha256sum) {
		return true
	}

	return false
}

// SetSha256sum gets a reference to the given string and assigns it to the Sha256sum field.
func (o *ContainerImageBody) SetSha256sum(v string) {
	o.Sha256sum = &v
}

func (o ContainerImageBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerImageBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	if !IsNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Sha256sum) {
		toSerialize["sha256sum"] = o.Sha256sum
	}
	return toSerialize, nil
}

type NullableContainerImageBody struct {
	value *ContainerImageBody
	isSet bool
}

func (v NullableContainerImageBody) Get() *ContainerImageBody {
	return v.value
}

func (v *NullableContainerImageBody) Set(val *ContainerImageBody) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerImageBody) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerImageBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerImageBody(val *ContainerImageBody) *NullableContainerImageBody {
	return &NullableContainerImageBody{value: val, isSet: true}
}

func (v NullableContainerImageBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerImageBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


