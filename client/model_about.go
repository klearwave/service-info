// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the About type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &About{}

// About struct for About
type About struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// Commit hash of this running version.
	CommitHash *string `json:"commit_hash,omitempty"`
	// Running version of this service in semantic versioning format.
	Version *string `json:"version,omitempty"`
}

// NewAbout instantiates a new About object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbout() *About {
	this := About{}
	return &this
}

// NewAboutWithDefaults instantiates a new About object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAboutWithDefaults() *About {
	this := About{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *About) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *About) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *About) SetSchema(v string) {
	o.Schema = &v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *About) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *About) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *About) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *About) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *About) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *About) SetVersion(v string) {
	o.Version = &v
}

func (o About) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o About) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	if !IsNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAbout struct {
	value *About
	isSet bool
}

func (v NullableAbout) Get() *About {
	return v.value
}

func (v *NullableAbout) Set(val *About) {
	v.value = val
	v.isSet = true
}

func (v NullableAbout) IsSet() bool {
	return v.isSet
}

func (v *NullableAbout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbout(val *About) *NullableAbout {
	return &NullableAbout{value: val, isSet: true}
}

func (v NullableAbout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


