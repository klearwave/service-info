// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the VersionBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionBody{}

// VersionBody struct for VersionBody
type VersionBody struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// Container images associated with this version.
	ContainerImages []ContainerImageBody `json:"container_images,omitempty"`
	// Version in semantic versioning format.
	Id *string `json:"id,omitempty"`
}

// NewVersionBody instantiates a new VersionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionBody() *VersionBody {
	this := VersionBody{}
	return &this
}

// NewVersionBodyWithDefaults instantiates a new VersionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionBodyWithDefaults() *VersionBody {
	this := VersionBody{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *VersionBody) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionBody) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *VersionBody) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *VersionBody) SetSchema(v string) {
	o.Schema = &v
}

// GetContainerImages returns the ContainerImages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VersionBody) GetContainerImages() []ContainerImageBody {
	if o == nil {
		var ret []ContainerImageBody
		return ret
	}
	return o.ContainerImages
}

// GetContainerImagesOk returns a tuple with the ContainerImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VersionBody) GetContainerImagesOk() ([]ContainerImageBody, bool) {
	if o == nil || IsNil(o.ContainerImages) {
		return nil, false
	}
	return o.ContainerImages, true
}

// HasContainerImages returns a boolean if a field has been set.
func (o *VersionBody) HasContainerImages() bool {
	if o != nil && !IsNil(o.ContainerImages) {
		return true
	}

	return false
}

// SetContainerImages gets a reference to the given []ContainerImageBody and assigns it to the ContainerImages field.
func (o *VersionBody) SetContainerImages(v []ContainerImageBody) {
	o.ContainerImages = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VersionBody) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionBody) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VersionBody) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VersionBody) SetId(v string) {
	o.Id = &v
}

func (o VersionBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	if o.ContainerImages != nil {
		toSerialize["container_images"] = o.ContainerImages
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableVersionBody struct {
	value *VersionBody
	isSet bool
}

func (v NullableVersionBody) Get() *VersionBody {
	return v.value
}

func (v *NullableVersionBody) Set(val *VersionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionBody(val *VersionBody) *NullableVersionBody {
	return &NullableVersionBody{value: val, isSet: true}
}

func (v NullableVersionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


