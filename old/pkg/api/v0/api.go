// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreatedAt Creation timestamp of the version.  This is determined on the backend at creation time and is not modifiable.
type CreatedAt = time.Time

// Id Database ID of the stored object.  This is determined on the backend at creation time and is not modifiable.
type Id = int

// Latest Whether or not this version is the latest version.
type Latest = bool

// Version defines model for version.
type Version struct {
	// CreatedAt Creation timestamp of the version.  This is determined on the backend at creation time and is not modifiable.
	CreatedAt *CreatedAt `json:"created_at,omitempty"`

	// Id Database ID of the stored object.  This is determined on the backend at creation time and is not modifiable.
	Id *Id `json:"id,omitempty"`

	// Latest Whether or not this version is the latest version.
	Latest *Latest `json:"latest,omitempty"`

	// VersionId Version identifier in semantic versioning format.
	VersionId *VersionId `json:"version_id,omitempty"`
}

// VersionId Version identifier in semantic versioning format.
type VersionId = string

// DeleteResponse defines model for deleteResponse.
type DeleteResponse struct {
	Message *string `json:"message,omitempty"`
}

// ErrorBadRequest defines model for errorBadRequest.
type ErrorBadRequest struct {
	Message *string `json:"message,omitempty"`
}

// ErrorInternalServer defines model for errorInternalServer.
type ErrorInternalServer struct {
	Message *string `json:"message,omitempty"`
}

// ErrorNotFound defines model for errorNotFound.
type ErrorNotFound struct {
	Message *string `json:"message,omitempty"`
}

// VersionResponse defines model for versionResponse.
type VersionResponse = Version

// VersionsResponse defines model for versionsResponse.
type VersionsResponse struct {
	Versions *[]Version `json:"versions,omitempty"`
}

// CreateVersionJSONRequestBody defines body for CreateVersion for application/json ContentType.
type CreateVersionJSONRequestBody = Version

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadVersions request
	ReadVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVersionWithBody request with any body
	CreateVersionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVersion(ctx context.Context, body CreateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVersion request
	DeleteVersion(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadVersion request
	ReadVersion(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVersionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVersionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVersion(ctx context.Context, body CreateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVersionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVersion(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVersionRequest(c.Server, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadVersion(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadVersionRequest(c.Server, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadVersionsRequest generates requests for ReadVersions
func NewReadVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v0/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVersionRequest calls the generic CreateVersion builder with application/json body
func NewCreateVersionRequest(server string, body CreateVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVersionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVersionRequestWithBody generates requests for CreateVersion with any type of body
func NewCreateVersionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v0/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVersionRequest generates requests for DeleteVersion
func NewDeleteVersionRequest(server string, versionId VersionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v0/versions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadVersionRequest generates requests for ReadVersion
func NewReadVersionRequest(server string, versionId VersionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v0/versions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadVersionsWithResponse request
	ReadVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadVersionsResponse, error)

	// CreateVersionWithBodyWithResponse request with any body
	CreateVersionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVersionResponse, error)

	CreateVersionWithResponse(ctx context.Context, body CreateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVersionResponse, error)

	// DeleteVersionWithResponse request
	DeleteVersionWithResponse(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*DeleteVersionResponse, error)

	// ReadVersionWithResponse request
	ReadVersionWithResponse(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*ReadVersionResponse, error)
}

type ReadVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionsResponse
	JSON500      *ErrorInternalServer
}

// Status returns HTTPResponse.Status
func (r ReadVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VersionResponse
	JSON400      *ErrorBadRequest
	JSON500      *ErrorInternalServer
}

// Status returns HTTPResponse.Status
func (r CreateVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
	JSON404      *ErrorNotFound
	JSON500      *ErrorInternalServer
}

// Status returns HTTPResponse.Status
func (r DeleteVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
	JSON404      *ErrorNotFound
	JSON500      *ErrorInternalServer
}

// Status returns HTTPResponse.Status
func (r ReadVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadVersionsWithResponse request returning *ReadVersionsResponse
func (c *ClientWithResponses) ReadVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadVersionsResponse, error) {
	rsp, err := c.ReadVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadVersionsResponse(rsp)
}

// CreateVersionWithBodyWithResponse request with arbitrary body returning *CreateVersionResponse
func (c *ClientWithResponses) CreateVersionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVersionResponse, error) {
	rsp, err := c.CreateVersionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVersionResponse(rsp)
}

func (c *ClientWithResponses) CreateVersionWithResponse(ctx context.Context, body CreateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVersionResponse, error) {
	rsp, err := c.CreateVersion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVersionResponse(rsp)
}

// DeleteVersionWithResponse request returning *DeleteVersionResponse
func (c *ClientWithResponses) DeleteVersionWithResponse(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*DeleteVersionResponse, error) {
	rsp, err := c.DeleteVersion(ctx, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVersionResponse(rsp)
}

// ReadVersionWithResponse request returning *ReadVersionResponse
func (c *ClientWithResponses) ReadVersionWithResponse(ctx context.Context, versionId VersionId, reqEditors ...RequestEditorFn) (*ReadVersionResponse, error) {
	rsp, err := c.ReadVersion(ctx, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadVersionResponse(rsp)
}

// ParseReadVersionsResponse parses an HTTP response from a ReadVersionsWithResponse call
func ParseReadVersionsResponse(rsp *http.Response) (*ReadVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorInternalServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateVersionResponse parses an HTTP response from a CreateVersionWithResponse call
func ParseCreateVersionResponse(rsp *http.Response) (*CreateVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorInternalServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteVersionResponse parses an HTTP response from a DeleteVersionWithResponse call
func ParseDeleteVersionResponse(rsp *http.Response) (*DeleteVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorInternalServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadVersionResponse parses an HTTP response from a ReadVersionWithResponse call
func ParseReadVersionResponse(rsp *http.Response) (*ReadVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorInternalServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all version information
	// (GET /api/v0/versions)
	ReadVersions(c *gin.Context)
	// Create a new version
	// (POST /api/v0/versions)
	CreateVersion(c *gin.Context)
	// Delete a version
	// (DELETE /api/v0/versions/{version_id})
	DeleteVersion(c *gin.Context, versionId VersionId)
	// Retrieve specific version information
	// (GET /api/v0/versions/{version_id})
	ReadVersion(c *gin.Context, versionId VersionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ReadVersions operation middleware
func (siw *ServerInterfaceWrapper) ReadVersions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadVersions(c)
}

// CreateVersion operation middleware
func (siw *ServerInterfaceWrapper) CreateVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateVersion(c)
}

// DeleteVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "version_id" -------------
	var versionId VersionId

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", c.Param("version_id"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteVersion(c, versionId)
}

// ReadVersion operation middleware
func (siw *ServerInterfaceWrapper) ReadVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "version_id" -------------
	var versionId VersionId

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", c.Param("version_id"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadVersion(c, versionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v0/versions", wrapper.ReadVersions)
	router.POST(options.BaseURL+"/api/v0/versions", wrapper.CreateVersion)
	router.DELETE(options.BaseURL+"/api/v0/versions/:version_id", wrapper.DeleteVersion)
	router.GET(options.BaseURL+"/api/v0/versions/:version_id", wrapper.ReadVersion)
}
